{
  "_args": [
    [
      "jbuilder@*",
      "C:\\Users\\Sprig\\Desktop\\jobsearchapp"
    ]
  ],
  "_from": "jbuilder@*",
  "_id": "jbuilder@0.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/jbuilder",
  "_npmUser": {
    "email": "info@mario-behrendt.de",
    "name": "behrendtio"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "jbuilder",
    "raw": "jbuilder@*",
    "rawSpec": "*",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jbuilder/-/jbuilder-0.0.4.tgz",
  "_shasum": "4a4db2d2b4f3f67ee251f1be1e78e43f467d15fa",
  "_shrinkwrap": null,
  "_spec": "jbuilder@*",
  "_where": "C:\\Users\\Sprig\\Desktop\\jobsearchapp",
  "author": {
    "email": "info@mario-behrendt.de",
    "name": "Mario Behrendt"
  },
  "bugs": {
    "url": "https://github.com/behrendtio/jbuilder/issues"
  },
  "dependencies": {},
  "description": "Create JSON structures via a Builder-style DSL in Node.js",
  "devDependencies": {
    "expect.js": "0.2.0",
    "mocha": "1.12.1"
  },
  "directories": {},
  "dist": {
    "shasum": "4a4db2d2b4f3f67ee251f1be1e78e43f467d15fa",
    "tarball": "https://registry.npmjs.org/jbuilder/-/jbuilder-0.0.4.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/behrendtio/jbuilder#readme",
  "keywords": [
    "json",
    "builder",
    "DSL"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "info@mario-behrendt.de",
      "name": "behrendtio"
    }
  ],
  "name": "jbuilder",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/behrendtio/jbuilder.png?branch=master)](https://travis-ci.org/behrendtio/jbuilder)\n\n# Jbuilder for Node.js\n\n## Purpose\n\nTiny WIP Node.js port of rails' jbuilder.\n\n## Installation\n\n```bash\n$ npm i jbuilder\n```\n\n## Usage\n\n#### jbuilder#create(fn)\n\nReturns JSON container. Call `target()` on the container to get the JSON\nrepresentation as string.\n\n#### jbuilder#encode(fn)\n\nSame as `#create()`, but returns JSON string instead.\n\n#### json.target()\n\nConverts JSON container to JSON string and returns it.\n\n```javascript\nvar output = jbuilder.create(function(json) {\n  json.set('key', 'value');\n});\n\nconsole.log(output.target());\n// {\"key\":\"value\"}\n```\n\n#### json.set(key, value)\n\nSets the value for the given key.\n\n```javascript\nvar output = jbuilder.encode(function(json) {\n  json.set('name', 'Mario');\n});\n\nconsole.log(output);\n// {\"name\":\"Mario\"}\n\n// Set second level values\nvar output = jbuilder.encode(function(json) {\n  json.set('profile', function(json) {\n    json.set('imagePath', '/0815.jpg');\n\n    // Set third level values\n    json.set('chuck', function(json) {\n      json.set('name', 'Norris');\n    });\n  });\n});\n\nconsole.log(output);\n// {\"profile\":{\"imagePath\":\"/0815.jpg\",\"chuck\":{\"name\":\"Norris\"}}}\n```\n\n#### json.extract(obj, [...])\n\nExtracts all keys for the given object. The parameter list is dynamic, but must\nhave at least an object and one key. If the first parameter is an array, it will\nextract the keys from all objects within the array and add the whole result set\nas an array to the json container.\n\n```javascript\nvar product = { price: 12.99, name: 'Foo', weight: '1kg', test: 'bar' };\n\nvar output = jbuilder.encode(function(json) {\n  json.set('product', function(json) {\n    json.extract(product, 'price', 'name', 'weight');\n  });\n});\n\nconsole.log(output);\n// {\"product\":{\"price\":12.99,\"name\":\"Foo\",\"weight\":\"1kg\"}}\n\n// Extract values of array\nvar output = jbuilder.encode(function(json) {\n  json.set('products', function(json) {\n    json.extract([product, product], 'price', 'name', 'weight');\n  });\n});\n\nconsole.log(output);\n// {\"products\":[{\"price\":12.99,\"name\":\"Foo\",\"weight\":\"1kg\"},{\"price\":12.99,\"name\":\"Foo\",\"weight\":\"1kg\"}]}\n```\n\n#### json.child(fn)\n\nAdds all values set in the given callback within an array instead of a plain\nobject. Useful in loops.\n\n```javascript\n// Turns object into array\nvar output = jbuilder.encode(function(json) {\n  json.set('orders', function(json) {\n    json.child(function(json) {\n      json.set('id', 1);\n    });\n    json.child(function(json) {\n      json.set('id', 2);\n    });\n  });\n});\n\nconsole.log(output);\n// {\"orders\":[{\"id\":1},{\"id\":2}]}\n```\n\n#### json.setIgnoreFalse(bool)\n\nIf set to true, all values that are set afterwards are ignored if they are sort\nof false (undefined, 0, false).\n\n```javascript\n// Ignore false values\nvar output = jbuilder.encode(function(json) {\n  json.set('admin', false); // Present\n  json.setIgnoreFalse(true);\n  json.set('value', false); // Not present\n});\n\nconsole.log(output);\n// {\"admin\":false}\n```\n\n#### json.setConvert(fn)\n\nCalls the given `fn` with the value as parameter before a value is inserted.\n\n```javascript\n// Lowercase all value\nvar convert = function(value) {\n  return value.toLowerCase();\n};\n\nvar output = jbuilder.encode(function(json) {\n  json.setConvert(convert);\n  json.set('name', 'FOO');\n  json.set('email', 'BAR@DOMAIN.TLD');\n});\n\nconsole.log(output);\n// {\"name\":\"foo\",\"email\":\"bar@domain.tld\"}\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Mario Behrendt info@mario-behrendt.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/behrendtio/jbuilder.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.0.4"
}
